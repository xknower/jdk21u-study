package com.sun.jdi.request;

import com.sun.jdi.ThreadReference;
import com.sun.jdi.event.EventQueue;
import com.sun.jdi.event.EventSet;
import com.sun.jdi.event.ThreadDeathEvent;

/**
 * Request for notification when a thread terminates in the target VM.
 * When an enabled ThreadDeathRequest is satisfied, an
 * {@link EventSet event set} containing a
 * {@link ThreadDeathEvent ThreadDeathEvent}
 * will be placed on the
 * {@link EventQueue EventQueue}.
 * The collection of existing ThreadDeathRequests is
 * managed by the {@link EventRequestManager}
 *
 * @see ThreadDeathEvent
 * @see EventQueue
 * @see EventRequestManager
 *
 * @author Robert Field
 * @since  1.3
 */
public interface ThreadDeathRequest extends EventRequest {

    /**
     * Restricts the events generated by this request to those in
     * the given thread.
     * @param thread the thread to filter on.
     * @throws InvalidRequestStateException if this request is currently
     * enabled or has been deleted.
     * Filters may be added only to disabled requests.
     */
    void addThreadFilter(ThreadReference thread);

    /**
     * Restricts the events generated by this request to only
     * <a href="{@docRoot}/java.base/java/lang/Thread.html#platform-threads">platform threads</a>.
     *
     * @implSpec
     * The default implementation throws {@code UnsupportedOperationException}.
     *
     * @throws InvalidRequestStateException if this request is currently
     * enabled or has been deleted
     *
     * @since 21
     */
    default void addPlatformThreadsOnlyFilter() {
        throw new UnsupportedOperationException("Method not implemented");
    }
}
