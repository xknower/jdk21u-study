#warn This file is preprocessed before being compiled

class XXX {

#begin

#if[rw]

    private $type$ get$Type$(long a) {
        try {
            $memtype$ x = SCOPED_MEMORY_ACCESS.get$Memtype$Unaligned(session(), null, a, bigEndian);
            return $fromBits$(x);
        } finally {
            Reference.reachabilityFence(this);
        }
    }

    public $type$ get$Type$() {
        try {
            return get$Type$(ix(nextGetIndex($BYTES_PER_VALUE$)));
        } finally {
            Reference.reachabilityFence(this);
        }
    }

    public $type$ get$Type$(int i) {
        try {
            return get$Type$(ix(checkIndex(i, $BYTES_PER_VALUE$)));
        } finally {
            Reference.reachabilityFence(this);
        }
    }

#end[rw]

    private ByteBuffer put$Type$(long a, $type$ x) {
#if[rw]
        try {
            $memtype$ y = $toBits$(x);
            SCOPED_MEMORY_ACCESS.put$Memtype$Unaligned(session(), null, a, y, bigEndian);
        } finally {
            Reference.reachabilityFence(this);
        }
        return this;
#else[rw]
        throw new ReadOnlyBufferException();
#end[rw]
    }

    public ByteBuffer put$Type$($type$ x) {
#if[rw]
        put$Type$(ix(nextPutIndex($BYTES_PER_VALUE$)), x);
        return this;
#else[rw]
        throw new ReadOnlyBufferException();
#end[rw]
    }

    public ByteBuffer put$Type$(int i, $type$ x) {
#if[rw]
        put$Type$(ix(checkIndex(i, $BYTES_PER_VALUE$)), x);
        return this;
#else[rw]
        throw new ReadOnlyBufferException();
#end[rw]
    }

    public $Type$Buffer as$Type$Buffer() {
        int off = this.position();
        int lim = this.limit();
        assert (off <= lim);
        int rem = (off <= lim ? lim - off : 0);

        int size = rem >> $LG_BYTES_PER_VALUE$;
        if (!UNALIGNED && ((address + off) % $BYTES_PER_VALUE$ != 0)) {
            return (bigEndian
                    ? ($Type$Buffer)(new ByteBufferAs$Type$Buffer$RW$B(this,
                                                                       -1,
                                                                       0,
                                                                       size,
                                                                       size,
                                                                       address + off, segment))
                    : ($Type$Buffer)(new ByteBufferAs$Type$Buffer$RW$L(this,
                                                                       -1,
                                                                       0,
                                                                       size,
                                                                       size,
                                                                       address + off, segment)));
        } else {
            return (nativeByteOrder
                    ? ($Type$Buffer)(new Direct$Type$Buffer$RW$U(this,
                                                                 -1,
                                                                 0,
                                                                 size,
                                                                 size,
                                                                 off, segment))
                    : ($Type$Buffer)(new Direct$Type$Buffer$RW$S(this,
                                                                 -1,
                                                                 0,
                                                                 size,
                                                                 size,
                                                                 off, segment)));
        }
    }

#end

}
