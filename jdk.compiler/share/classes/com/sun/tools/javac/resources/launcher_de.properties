# Messages in this file which use "placeholders" for values (e.g. {0}, {1})
# are preceded by a stylized comment describing the type of the corresponding
# values.
# The simple types currently in use are:
#
# annotation        annotation compound
# boolean           true or false
# diagnostic        a sub-message; see compiler.misc.*
# fragment          similar to 'message segment', but with more specific type
# modifier          a Java modifier; e.g. public, private, protected
# file              a file URL
# file object       a file URL - similar to 'file' but typically used for source/class files, hence more specific
# flag              a Flags.Flag instance
# name              a name, typically a Java identifier
# number            an integer
# option name       the name of a command line option
# source version    a source version number, such as 1.5, 1.6, 1.7
# string            a general string
# symbol            the name of a declared type
# symbol kind       the kind of a symbol (i.e. method, variable)
# kind name         an informative description of the kind of a declaration; see compiler.misc.kindname.*
# token             the name of a non-terminal in source code; see compiler.misc.token.*
# type              a Java type; e.g. int, X, X<T>
# object            a Java object (unspecified)
# unused            the value is not used in this message
#
# The following compound types are also used:
#
# collection of X   a comma-separated collection of items; e.g. collection of type
# list of X         a comma-separated list of items; e.g. list of type
# set of X          a comma-separated set of items; e.g. set of modifier
#
# These may be composed:
#
# list of type or message segment
#
# The following type aliases are supported:
#
# message segment --> diagnostic or fragment
# file name --> file, path or file object
#
# Custom comments are supported in parenthesis i.e.
#
# number (classfile major version)
#
# These comments are used internally in order to generate an enum-like class declaration containing
# a method/field for each of the diagnostic keys listed here. Those methods/fields can then be used
# by javac code to build diagnostics in a type-safe fashion.
#
# In addition, these comments are verified by the jtreg test test/tools/javac/diags/MessageInfo,
# using info derived from the collected set of examples in test/tools/javac/diags/examples.
# MessageInfo can also be run as a standalone utility providing more facilities
# for manipulating this file. For more details, see MessageInfo.java.

## All errors are preceded by this string.
launcher.error=Fehler:\u0020

launcher.err.no.args=kein Pfad f\u00FCr Quelldatei

launcher.err.security.manager=Quellcode-Launcher kann nicht mit aktiviertem Sicherheitsmanager verwendet werden

# 0: string
launcher.err.invalid.filename=ung\u00FCltiger Pfad f\u00FCr Quelldatei: {0}

# 0: path
launcher.err.file.not.found=Quelldatei nicht gefunden: {0}

launcher.err.compilation.failed=Kompilierung nicht erfolgreich

launcher.err.no.class=keine Klasse deklariert in Quelldatei

launcher.err.main.not.public.static=Methode "main" ist nicht als "public static" deklariert

launcher.err.main.not.void=Methode "main" ist nicht mit R\u00FCckgabetyp "void" deklariert

# 0: string
launcher.err.cant.find.class=Klasse nicht gefunden: {0}

# 0: string
launcher.err.cant.find.main.method=Methode "main(String[])" nicht gefunden in Klasse: {0}

# 0: string
launcher.err.cant.access.main.method=kein Zugriff auf Methode "main" in Klasse: {0}

# 0: string
launcher.err.cant.find.constructor=No-Argument-Konstruktor nicht gefunden in Klasse: {0}

# 0: string
launcher.err.cant.access.constructor=Kein Zugriff auf No-Argument-Konstruktor in Klasse: {0}

# 0: path, 1: object
launcher.err.cant.read.file=Fehler beim Lesen von Quelldatei {0}: {1}

# 0: string
launcher.err.no.value.for.option=kein Wert angegeben f\u00FCr Option: {0}

# 0: string
launcher.err.invalid.value.for.source=ung\u00FCltiger Wert f\u00FCr Option --source: {0}

launcher.err.enable.preview.requires.source=--enable-preview muss mit --source verwendet werden
